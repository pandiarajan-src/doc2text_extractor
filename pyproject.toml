[project]
name = "doc2text-extractor"
version = "1.0.0"
description = "Document to Text Extractor API with metadata extraction for RAG applications"
readme = "README.md"
requires-python = "==3.12.*"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
license = { text = "MIT" }
keywords = ["document", "extraction", "pdf", "docx", "xlsx", "markdown", "fastapi", "rag"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: General",
]

dependencies = [
    "fastapi[all]>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
    "httpx>=0.25.2",
    "click>=8.1.7",
    "pdfplumber>=0.10.3",
    "PyMuPDF>=1.23.9",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    "markdown2>=2.4.10",
    "beautifulsoup4>=4.12.2",
    "Pillow>=10.1.0",
    "python-magic>=0.4.27",
    "pyyaml>=6.0.1",
    "sqlalchemy>=2.0.23",
    # Linting and testing tools
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.6",
    "black>=23.11.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
    "types-pyyaml>=6.0.12",
    "types-requests>=2.31.0",
]

# Commented out scripts to avoid build issues during development
# [project.scripts]
# doc2text = "cli.client:cli"
# doc2text-server = "api.main:run_server"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["api", "core", "cli"]

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "pytest"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
line-length = 100
target-version = ["py311"]
preview = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_any_generics = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --ignore=docs"
testpaths = [
    "tests",
]
pythonpath = ["."]

[tool.coverage.run]
source = ["api", "core", "cli"]
omit = ["*/tests/*", "*/test_*.py", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]